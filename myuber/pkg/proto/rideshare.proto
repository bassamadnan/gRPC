syntax = "proto3";

package myuber;
option go_package="pkg/proto;rspb"; // ride sharing protobuf

service RideService {

    // after getting a request from a rider, server sends a response 1 if its attempting to find, otherwise 0
    rpc RequestRide (RideRequest)   returns (RideResponse) {}
    // after getting a request from a rider, server sends one of the status as response
    rpc GetRideStatus (RideStatusRequest) returns (RideStatusResponse) {}


    // after server gets request from rider, it communicates to driver via stream (server side streaming)
    rpc ConnectDriver(DriverRequest)   returns (stream DriverRideRequest) {}

    // the following unary calls from driver to server
    rpc AcceptRide (AcceptRideRequest) returns (AcceptRideResponse) {}
    rpc RejectRide (RejectRideRequest) returns (RejectRideResponse) {}
    rpc CompleteRide (RideCompletionRequest) returns (RideCompletionResponse) {}
}

// we want the driver to know who he is serving (rider_id)

message RideRequest {
  string pickup = 1;
  string destination = 2;
  string rider_id = 3;
}


// server will check if it has tuple (rider_id, driver_id, status)
// when rider client sends a request initially, the driver_id is -1, and status is set to pending (since we are waiting for drivers to accept)
// when a driver accepts via the accept ride service, the stratus is set to in progress, so the get ride status will now return the same
// when complete ride service has been called by driver, the status is set to completed
// if a driver did not get accepted due to rejectride service, keep the driver_id as -1 and ask next driver connected to server
message RideStatusRequest {
  string rider_id = 1;
}

// after accepting, assume ride starts instantly and goes on for 5 seconds (random) or maybe at this as input
message RideStatusResponse {
  enum Status {
    PENDING = 0;            // request has gone to the driver, he has not pressed y/n yet.
    IN_PROGRESS = 1;        // driver accepted, ongoing ride
    NO_DRIVERS_AVAILABLE = 2; // all denied, or all occupied, or none connected
  }
  Status status = 1;
  string rider_id = 2;
  string driver_id = 3;
}

message DriverRequest {
  string driver_id = 1;
}

message DriverRideRequest {
  string rider_id = 1;
  string pickup = 2;
  string destination = 3;
}

message AcceptRideRequest {
  string rider_id = 1;
  string driver_id = 2;
}

message RejectRideRequest {
  string rider_id = 1;
  string driver_id = 2;
}


message RideCompletionRequest {
  string driver_id = 1;
}

message RideResponse {
    bool success = 1;
}

message AcceptRideResponse {
    bool success = 1;
}
message RejectRideResponse {
    bool success = 1;
}

message RideCompletionResponse {
    bool success = 1;
}
