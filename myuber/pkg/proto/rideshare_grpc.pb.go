// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.12.4
// source: pkg/proto/rideshare.proto

package rspb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	RideService_RequestRide_FullMethodName   = "/myuber.RideService/RequestRide"
	RideService_GetRideStatus_FullMethodName = "/myuber.RideService/GetRideStatus"
	RideService_ConnectDriver_FullMethodName = "/myuber.RideService/ConnectDriver"
	RideService_AcceptRide_FullMethodName    = "/myuber.RideService/AcceptRide"
	RideService_RejectRide_FullMethodName    = "/myuber.RideService/RejectRide"
	RideService_CompleteRide_FullMethodName  = "/myuber.RideService/CompleteRide"
)

// RideServiceClient is the client API for RideService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RideServiceClient interface {
	// after getting a request from a rider, server sends a response 1 if its attempting to find, otherwise 0
	RequestRide(ctx context.Context, in *RideRequest, opts ...grpc.CallOption) (*RideResponse, error)
	// after getting a request from a rider, server sends one of the status as response
	GetRideStatus(ctx context.Context, in *RideStatusRequest, opts ...grpc.CallOption) (*RideStatusResponse, error)
	// after server gets request from rider, it communicates to driver via stream (server side streaming)
	ConnectDriver(ctx context.Context, in *DriverRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[DriverRideRequest], error)
	// the following unary calls from driver to server
	AcceptRide(ctx context.Context, in *AcceptRideRequest, opts ...grpc.CallOption) (*AcceptRideResponse, error)
	RejectRide(ctx context.Context, in *RejectRideRequest, opts ...grpc.CallOption) (*RejectRideResponse, error)
	CompleteRide(ctx context.Context, in *RideCompletionRequest, opts ...grpc.CallOption) (*RideCompletionResponse, error)
}

type rideServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRideServiceClient(cc grpc.ClientConnInterface) RideServiceClient {
	return &rideServiceClient{cc}
}

func (c *rideServiceClient) RequestRide(ctx context.Context, in *RideRequest, opts ...grpc.CallOption) (*RideResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RideResponse)
	err := c.cc.Invoke(ctx, RideService_RequestRide_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rideServiceClient) GetRideStatus(ctx context.Context, in *RideStatusRequest, opts ...grpc.CallOption) (*RideStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RideStatusResponse)
	err := c.cc.Invoke(ctx, RideService_GetRideStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rideServiceClient) ConnectDriver(ctx context.Context, in *DriverRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[DriverRideRequest], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &RideService_ServiceDesc.Streams[0], RideService_ConnectDriver_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[DriverRequest, DriverRideRequest]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type RideService_ConnectDriverClient = grpc.ServerStreamingClient[DriverRideRequest]

func (c *rideServiceClient) AcceptRide(ctx context.Context, in *AcceptRideRequest, opts ...grpc.CallOption) (*AcceptRideResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AcceptRideResponse)
	err := c.cc.Invoke(ctx, RideService_AcceptRide_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rideServiceClient) RejectRide(ctx context.Context, in *RejectRideRequest, opts ...grpc.CallOption) (*RejectRideResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RejectRideResponse)
	err := c.cc.Invoke(ctx, RideService_RejectRide_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rideServiceClient) CompleteRide(ctx context.Context, in *RideCompletionRequest, opts ...grpc.CallOption) (*RideCompletionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RideCompletionResponse)
	err := c.cc.Invoke(ctx, RideService_CompleteRide_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RideServiceServer is the server API for RideService service.
// All implementations must embed UnimplementedRideServiceServer
// for forward compatibility.
type RideServiceServer interface {
	// after getting a request from a rider, server sends a response 1 if its attempting to find, otherwise 0
	RequestRide(context.Context, *RideRequest) (*RideResponse, error)
	// after getting a request from a rider, server sends one of the status as response
	GetRideStatus(context.Context, *RideStatusRequest) (*RideStatusResponse, error)
	// after server gets request from rider, it communicates to driver via stream (server side streaming)
	ConnectDriver(*DriverRequest, grpc.ServerStreamingServer[DriverRideRequest]) error
	// the following unary calls from driver to server
	AcceptRide(context.Context, *AcceptRideRequest) (*AcceptRideResponse, error)
	RejectRide(context.Context, *RejectRideRequest) (*RejectRideResponse, error)
	CompleteRide(context.Context, *RideCompletionRequest) (*RideCompletionResponse, error)
	mustEmbedUnimplementedRideServiceServer()
}

// UnimplementedRideServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRideServiceServer struct{}

func (UnimplementedRideServiceServer) RequestRide(context.Context, *RideRequest) (*RideResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestRide not implemented")
}
func (UnimplementedRideServiceServer) GetRideStatus(context.Context, *RideStatusRequest) (*RideStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRideStatus not implemented")
}
func (UnimplementedRideServiceServer) ConnectDriver(*DriverRequest, grpc.ServerStreamingServer[DriverRideRequest]) error {
	return status.Errorf(codes.Unimplemented, "method ConnectDriver not implemented")
}
func (UnimplementedRideServiceServer) AcceptRide(context.Context, *AcceptRideRequest) (*AcceptRideResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AcceptRide not implemented")
}
func (UnimplementedRideServiceServer) RejectRide(context.Context, *RejectRideRequest) (*RejectRideResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RejectRide not implemented")
}
func (UnimplementedRideServiceServer) CompleteRide(context.Context, *RideCompletionRequest) (*RideCompletionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CompleteRide not implemented")
}
func (UnimplementedRideServiceServer) mustEmbedUnimplementedRideServiceServer() {}
func (UnimplementedRideServiceServer) testEmbeddedByValue()                     {}

// UnsafeRideServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RideServiceServer will
// result in compilation errors.
type UnsafeRideServiceServer interface {
	mustEmbedUnimplementedRideServiceServer()
}

func RegisterRideServiceServer(s grpc.ServiceRegistrar, srv RideServiceServer) {
	// If the following call pancis, it indicates UnimplementedRideServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RideService_ServiceDesc, srv)
}

func _RideService_RequestRide_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RideRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RideServiceServer).RequestRide(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RideService_RequestRide_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RideServiceServer).RequestRide(ctx, req.(*RideRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RideService_GetRideStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RideStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RideServiceServer).GetRideStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RideService_GetRideStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RideServiceServer).GetRideStatus(ctx, req.(*RideStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RideService_ConnectDriver_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DriverRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RideServiceServer).ConnectDriver(m, &grpc.GenericServerStream[DriverRequest, DriverRideRequest]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type RideService_ConnectDriverServer = grpc.ServerStreamingServer[DriverRideRequest]

func _RideService_AcceptRide_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AcceptRideRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RideServiceServer).AcceptRide(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RideService_AcceptRide_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RideServiceServer).AcceptRide(ctx, req.(*AcceptRideRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RideService_RejectRide_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RejectRideRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RideServiceServer).RejectRide(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RideService_RejectRide_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RideServiceServer).RejectRide(ctx, req.(*RejectRideRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RideService_CompleteRide_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RideCompletionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RideServiceServer).CompleteRide(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RideService_CompleteRide_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RideServiceServer).CompleteRide(ctx, req.(*RideCompletionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RideService_ServiceDesc is the grpc.ServiceDesc for RideService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RideService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "myuber.RideService",
	HandlerType: (*RideServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RequestRide",
			Handler:    _RideService_RequestRide_Handler,
		},
		{
			MethodName: "GetRideStatus",
			Handler:    _RideService_GetRideStatus_Handler,
		},
		{
			MethodName: "AcceptRide",
			Handler:    _RideService_AcceptRide_Handler,
		},
		{
			MethodName: "RejectRide",
			Handler:    _RideService_RejectRide_Handler,
		},
		{
			MethodName: "CompleteRide",
			Handler:    _RideService_CompleteRide_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ConnectDriver",
			Handler:       _RideService_ConnectDriver_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "pkg/proto/rideshare.proto",
}
