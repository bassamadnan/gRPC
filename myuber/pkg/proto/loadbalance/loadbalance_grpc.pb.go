// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.12.4
// source: pkg/proto/loadbalance.proto

package lbpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	LoadBalanceService_GetServers_FullMethodName = "/myuber.LoadBalanceService/GetServers"
	LoadBalanceService_GetServer_FullMethodName  = "/myuber.LoadBalanceService/GetServer"
	LoadBalanceService_AddServer_FullMethodName  = "/myuber.LoadBalanceService/AddServer"
)

// LoadBalanceServiceClient is the client API for LoadBalanceService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LoadBalanceServiceClient interface {
	GetServers(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Servers, error)
	GetServer(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Server, error)
	AddServer(ctx context.Context, in *Server, opts ...grpc.CallOption) (*Empty, error)
}

type loadBalanceServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLoadBalanceServiceClient(cc grpc.ClientConnInterface) LoadBalanceServiceClient {
	return &loadBalanceServiceClient{cc}
}

func (c *loadBalanceServiceClient) GetServers(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Servers, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Servers)
	err := c.cc.Invoke(ctx, LoadBalanceService_GetServers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loadBalanceServiceClient) GetServer(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Server, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Server)
	err := c.cc.Invoke(ctx, LoadBalanceService_GetServer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loadBalanceServiceClient) AddServer(ctx context.Context, in *Server, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, LoadBalanceService_AddServer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LoadBalanceServiceServer is the server API for LoadBalanceService service.
// All implementations must embed UnimplementedLoadBalanceServiceServer
// for forward compatibility.
type LoadBalanceServiceServer interface {
	GetServers(context.Context, *Empty) (*Servers, error)
	GetServer(context.Context, *Empty) (*Server, error)
	AddServer(context.Context, *Server) (*Empty, error)
	mustEmbedUnimplementedLoadBalanceServiceServer()
}

// UnimplementedLoadBalanceServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedLoadBalanceServiceServer struct{}

func (UnimplementedLoadBalanceServiceServer) GetServers(context.Context, *Empty) (*Servers, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServers not implemented")
}
func (UnimplementedLoadBalanceServiceServer) GetServer(context.Context, *Empty) (*Server, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServer not implemented")
}
func (UnimplementedLoadBalanceServiceServer) AddServer(context.Context, *Server) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddServer not implemented")
}
func (UnimplementedLoadBalanceServiceServer) mustEmbedUnimplementedLoadBalanceServiceServer() {}
func (UnimplementedLoadBalanceServiceServer) testEmbeddedByValue()                            {}

// UnsafeLoadBalanceServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LoadBalanceServiceServer will
// result in compilation errors.
type UnsafeLoadBalanceServiceServer interface {
	mustEmbedUnimplementedLoadBalanceServiceServer()
}

func RegisterLoadBalanceServiceServer(s grpc.ServiceRegistrar, srv LoadBalanceServiceServer) {
	// If the following call pancis, it indicates UnimplementedLoadBalanceServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&LoadBalanceService_ServiceDesc, srv)
}

func _LoadBalanceService_GetServers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoadBalanceServiceServer).GetServers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LoadBalanceService_GetServers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoadBalanceServiceServer).GetServers(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _LoadBalanceService_GetServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoadBalanceServiceServer).GetServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LoadBalanceService_GetServer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoadBalanceServiceServer).GetServer(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _LoadBalanceService_AddServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Server)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoadBalanceServiceServer).AddServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LoadBalanceService_AddServer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoadBalanceServiceServer).AddServer(ctx, req.(*Server))
	}
	return interceptor(ctx, in, info, handler)
}

// LoadBalanceService_ServiceDesc is the grpc.ServiceDesc for LoadBalanceService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LoadBalanceService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "myuber.LoadBalanceService",
	HandlerType: (*LoadBalanceServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetServers",
			Handler:    _LoadBalanceService_GetServers_Handler,
		},
		{
			MethodName: "GetServer",
			Handler:    _LoadBalanceService_GetServer_Handler,
		},
		{
			MethodName: "AddServer",
			Handler:    _LoadBalanceService_AddServer_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/proto/loadbalance.proto",
}
